// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=mux1out);
    And(a=instruction[5], b=instruction[15], out=awrite);
    Not(in=instruction[15], out=acommand);
    Or(a=awrite, b=acommand, out=aregload);
    ARegister(in=mux1out, load=aregload, out=aregout, out[0..14]=addressM);
    And(a=instruction[12], b=instruction[15], out=menable);
    Mux16(a=aregout, b=inM, sel=menable, out=mux2out);
    And(a=instruction[4], b=instruction[15], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Mux(a=true, b=instruction[11], sel=instruction[15], out=zx);
    Mux(a=true, b=instruction[10], sel=instruction[15], out=nx);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=zy);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=ny);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=f);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=no);
    ALU(x=dregout, y=mux2out, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluout, out=outM, zr=zr1, ng=ng1);
    And(a=instruction[1], b=zr1, out=eqjump);
    And(a=instruction[2], b=ng1, out=ltjump);
    Not(in=zr1, out=zrnot);
    And(a=instruction[0], b=zrnot, out=and1out);
    Not(in=ng1, out=ngout);
    And(a=and1out, b=ngout, out=gtjump);
    Or(a=eqjump, b=ltjump, out=or1out);
    Or(a=or1out, b=gtjump, out=cjump);
    And(a=cjump, b=instruction[15], out=jump);
    PC(in=aregout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}